// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                            Int      @id @default(autoincrement())
  email                         String   @unique
  username                      String   @unique
  password_hash                 String
  role                          Role     @relation(fields: [roleId], references: [id])
  roleId                        Int
  profile_picture_url           String?  // Optional profile picture URL
  jobSeekerProfile              JobSeekerProfile?
  jobProviderProfile            JobProviderProfile?
  notifications                 Notification[]
  created_at                    DateTime @default(now())
  updated_at                    DateTime @updatedAt
}

model Role {
  id                            Int      @id @default(autoincrement())
  name                          String   @unique
  createdAt                     DateTime @default(now())
  updatedAt                     DateTime @updatedAt
  users                         User[]
}

model JobSeekerProfile {
  id                            Int @id @default(autoincrement())
  userId                        Int  @unique
  user                          User @relation(fields: [userId], references: [id])
  first_name                    String
  last_name                     String
  phone_number                  String
  resume_url                    String
  skills                        Json     
  experience                    Json     
  education                     String     
  location                      String
  preferredJobTypes             Json      
  notifications_enabled         Boolean   @default(true)
  created_at                    DateTime  @default(now())
  updated_at                    DateTime  @updatedAt
  jobApplications               JobApplication[]
}

model JobProviderProfile {
  id                            Int @id @default(autoincrement())
  userId                        Int  @unique  
  user                          User @relation(fields: [userId], references: [id])
  company_name                  String
  company_description           String
  website                       String
  email                         String
  phone                         String
  location                      String
  created_at                    DateTime @default(now())
  updated_at                    DateTime @updatedAt
  jobListing                    JobListing[]
}

model JobListing {
  id                            Int @id @default(autoincrement())
  providerId                    Int
  categoryId                    Int  
  title                         String
  description                   String
  requirements                  Json     
  preferredSkills               Json     
  location                      String
  salary_range                  String
  posted_at                     DateTime @default(now())
  expires_at                    DateTime
  applications_count            Int  @default(0)
  created_at                    DateTime  @default(now())
  updated_at                    DateTime  @updatedAt
  jobApplications               JobApplication[]
  jobProviderProfile            JobProviderProfile @relation(fields: [providerId], references: [id])
  jobCategory                   JobCategory @relation(fields:[categoryId],references:[id])
}

model JobApplication {
  id                            Int @id @default(autoincrement())
  jobId                         Int 
  seekerId                      Int 
  applied_at                    DateTime @default(now())
  cover_letter_url              String?
  portfolio_url                 String?
  created_at                    DateTime @default(now())
  updated_at                    DateTime @updatedAt
  seeker                        JobSeekerProfile @relation(fields: [seekerId], references: [id]) 
  jobListing                    JobListing @relation(fields: [jobId], references: [id]) 
}

model JobCategory {
  id                            Int   @id @default(autoincrement())
  name                          String  @unique
  jobListing                    JobListing[]
  createdAt                     DateTime @default(now())
  updatedAt                     DateTime @updatedAt
 }

model Notification {
  id                            Int  @id @default(autoincrement())
  userId                        Int  
  title                         String
  message                       String
  read                          Boolean  @default(false)
  type                          String
  createdAt                     DateTime  @default(now())
  updatedAt                     DateTime  @updatedAt
  user                          User   @relation(fields: [userId], references: [id]) 
 }




